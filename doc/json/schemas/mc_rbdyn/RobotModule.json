{
  "title": "mc_rbdyn::RobotModule",
  "type": "object",
  "properties":
  {
    "path":
    {
      "type": "string",
      "description": "Path to the location of the robot's data files"
    },
    "name": { "type": "string" },
    "urdf_path":
    {
      "type": "string",
      "description": "Path to the URDF file, relative to \"path\""
    },
    "mb":
    {
      "description": "If mb is provided, mbc, bounds, visuals and collisionTransforms are required. Otherwise, the URDF is loaded when the object is loaded, using the filteredLinks and fixed properties.",
      "$ref": "/../../rbd/MultiBody.json"
    },
    "mbc":
    {
      "description": "Required if mb is provided.",
      "$ref": "/../../rbd/MultiBodyConfig.json"
    },
    "bounds":
    {
      "description": "Position limits (lower/upper), velocity, torque",
      "type": "array",
      "items":
      {
        "$ref": "#/definitions/joint_bound_map"
      },
      "minItems": 4,
      "maxItems": 4
    },
    "visuals":
    {
      "type": "object",
      "patternProperties":
      {
        "*": { "type": "array", "items": { "$ref" : "/../../mc_rbdyn_urdf/Visual.json" } }
      }
    },
    "collisionTransforms":
    {
      "type": "object",
      "patternProperties":
      {
        "*": { "type": "array", "items": { "$ref" : "/../../sva/PTransformd.json" } }
      }
    },
    "filteredLinks":
    {
      "description": "Don't include the bodies in this list even if they appear in the URDF",
      "type": "array",
      "items":
      {
        "type": "string"
      }
    },
    "fixed":
    {
      "description": "If true, the robot has a fixed base",
      "type": "boolean"
    },
    "convexHulls":
    {
      "description": "Each key should be a body name, each entry in the vector associated to a key should be the collision object name and the path to the convex file",
      "type": "object",
      "patternProperties":
      {
        "*": { "type": "array", "items": { "$ref": "#/definitions/string_pair" } }
      }
    },
    "stpbvHulls":
    {
      "description": "Each key should be a body name, each entry in the vector associated to a key should be the collision object name and the path to the convex file",
      "type": "object",
      "patternProperties":
      {
        "*": { "type": "array", "items": { "$ref": "#/definitions/string_pair" } }
      }
    },
    "flexibilities":
    {
      "type": "array",
      "items":
      {
        "$ref": "/../../mc_rbdyn/Flexibility.json"
      }
    },
    "forceSensors":
    {
      "type": "array",
      "items":
      {
        "$ref": "/../../mc_rbdyn/ForceSensor.json"
      }
    },
    "bodySensors":
    {
      "type": "array",
      "items":
      {
        "$ref": "/../../mc_rbdyn/BodySensor.json"
      }
    },
    "springs":
    {
      "$ref": "/../../mc_rbdyn/Springs.json"
    },
    "minimalSelfCollisions":
    {
      "type": "array",
      "items":
      {
        "$ref": "/../../mc_rbdyn/Collision.json"
      }
    },
    "commonSelfCollisions":
    {
      "type": "array",
      "items":
      {
        "$ref": "/../../mc_rbdyn/Collision.json"
      }
    },
    "grippers":
    {
      "type": "array",
      "items":
      {
        "$ref": "/../../mc_rbdyn/RobotModule.Gripper.json"
      }
    },
    "default_attitude":
    {
      "type": "array",
      "items":
      {
        "type": "number"
      },
      "minItems": 7,
      "maxItems": 7
    },
    "stance":
    {
      "type": "object",
      "patternProperties":
      {
        "*": { "type": "array", "items": { "type": "number" } }
      }
    },
    "ref_joint_order":
    {
      "type": "array", "items": { "type": "string" }
    }
  },
  "required": ["path", "name", "urdf_path"],
  "additionalProperties": false,
  "definitions":
  {
    "array_number": {
      "type": "array",
      "items":
      {
        "type": "number"
      }
    },
    "joint_bound_map": {
      "type": "object",
      "patternProperties":
      {
        "*": { "type": "array", "items": { "type": "number" } }
      }
    },
    "string_pair": {
      "type": "array",
      "items":
      {
        "type": "string"
      },
      "minItems": 2,
      "maxItems": 2
    }
  }
}
